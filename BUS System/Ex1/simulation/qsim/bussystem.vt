// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/27/2016 23:28:05"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    bussystem
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module bussystem_vlg_sample_tst(
	clock,
	in,
	loadenable,
	selectinput,
	selection,
	sampler_tx
);
input  clock;
input [3:0] in;
input [1:0] loadenable;
input  selectinput;
input [1:0] selection;
output sampler_tx;

reg sample;
time current_time;
always @(clock or in or loadenable or selectinput or selection)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module bussystem_vlg_check_tst (
	Busout,
	sampler_rx
);
input [3:0] Busout;
input sampler_rx;

reg [3:0] Busout_expected;

reg [3:0] Busout_prev;

reg [3:0] Busout_expected_prev;

reg [3:0] last_Busout_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	Busout_prev = Busout;
end

// update expected /o prevs

always @(trigger)
begin
	Busout_expected_prev = Busout_expected;
end


// expected Busout[ 3 ]
initial
begin
	Busout_expected[3] = 1'bX;
end 
// expected Busout[ 2 ]
initial
begin
	Busout_expected[2] = 1'bX;
end 
// expected Busout[ 1 ]
initial
begin
	Busout_expected[1] = 1'bX;
end 
// expected Busout[ 0 ]
initial
begin
	Busout_expected[0] = 1'bX;
end 
// generate trigger
always @(Busout_expected or Busout)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Busout = %b | ",Busout_expected_prev);
	$display("| real Busout = %b | ",Busout_prev);
`endif
	if (
		( Busout_expected_prev[0] !== 1'bx ) && ( Busout_prev[0] !== Busout_expected_prev[0] )
		&& ((Busout_expected_prev[0] !== last_Busout_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Busout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Busout_expected_prev);
		$display ("     Real value = %b", Busout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Busout_exp[0] = Busout_expected_prev[0];
	end
	if (
		( Busout_expected_prev[1] !== 1'bx ) && ( Busout_prev[1] !== Busout_expected_prev[1] )
		&& ((Busout_expected_prev[1] !== last_Busout_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Busout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Busout_expected_prev);
		$display ("     Real value = %b", Busout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Busout_exp[1] = Busout_expected_prev[1];
	end
	if (
		( Busout_expected_prev[2] !== 1'bx ) && ( Busout_prev[2] !== Busout_expected_prev[2] )
		&& ((Busout_expected_prev[2] !== last_Busout_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Busout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Busout_expected_prev);
		$display ("     Real value = %b", Busout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Busout_exp[2] = Busout_expected_prev[2];
	end
	if (
		( Busout_expected_prev[3] !== 1'bx ) && ( Busout_prev[3] !== Busout_expected_prev[3] )
		&& ((Busout_expected_prev[3] !== last_Busout_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Busout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Busout_expected_prev);
		$display ("     Real value = %b", Busout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Busout_exp[3] = Busout_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module bussystem_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [3:0] in;
reg [1:0] loadenable;
reg selectinput;
reg [1:0] selection;
// wires                                               
wire [3:0] Busout;

wire sampler;                             

// assign statements (if any)                          
bussystem i1 (
// port map - connection between master ports and signals/registers   
	.Busout(Busout),
	.clock(clock),
	.in(in),
	.loadenable(loadenable),
	.selectinput(selectinput),
	.selection(selection)
);

// clock
initial
begin
	repeat(6)
	begin
		clock = 1'b0;
		clock = #80000 1'b1;
		# 80000;
	end
	clock = 1'b0;
end 
// in[ 3 ]
initial
begin
	in[3] = 1'b0;
end 
// in[ 2 ]
initial
begin
	in[2] = 1'b1;
	in[2] = #150000 1'b0;
end 
// in[ 1 ]
initial
begin
	in[1] = 1'b0;
end 
// in[ 0 ]
initial
begin
	in[0] = 1'b1;
	in[0] = #150000 1'b0;
end 
// loadenable[ 1 ]
initial
begin
	repeat(2)
	begin
		loadenable[1] = 1'b0;
		loadenable[1] = #240000 1'b1;
		# 240000;
	end
	loadenable[1] = 1'b0;
end 
// loadenable[ 0 ]
initial
begin
	repeat(4)
	begin
		loadenable[0] = 1'b0;
		loadenable[0] = #120000 1'b1;
		# 120000;
	end
	loadenable[0] = 1'b0;
end 

// selectinput
initial
begin
	selectinput = 1'b1;
	selectinput = #150000 1'b0;
end 
// selection[ 1 ]
initial
begin
	selection[1] = 1'b0;
	selection[1] = #320000 1'b1;
	selection[1] = #320000 1'b0;
	selection[1] = #320000 1'b1;
end 
// selection[ 0 ]
initial
begin
	repeat(3)
	begin
		selection[0] = 1'b0;
		selection[0] = #160000 1'b1;
		# 160000;
	end
	selection[0] = 1'b0;
end 

bussystem_vlg_sample_tst tb_sample (
	.clock(clock),
	.in(in),
	.loadenable(loadenable),
	.selectinput(selectinput),
	.selection(selection),
	.sampler_tx(sampler)
);

bussystem_vlg_check_tst tb_out(
	.Busout(Busout),
	.sampler_rx(sampler)
);
endmodule

